function Eject-Drive  # {{{
{
<# {{{2
  .SYNOPSIS
    Eject the current CD-ROM from the given Drive
  .PARAMETER DriveLetter
    The drive letter to eject.
    Mandatory, no default.
  .EXAMPLE
    Eject-Drive D
  .EXAMPLE
    Eject-Drive -DriveLetter D
#> # }}}2
  [CmdletBinding()] 
  Param(
    [Parameter(Mandatory=$true)][string] $DriveLetter
  )
  $shellapp = new-object -com Shell.Application
  $shellapp.Namespace(17).ParseName("${DriveLetter}:").InvokeVerb("Eject")
  [System.Runtime.Interopservices.Marshal]::ReleaseComObject($shellapp)
  Remove-Variable shellapp
} # }}}

if ($env:PACKER_BUILDER_TYPE -match 'virtualbox')
{
  $volume = Get-Volume | where FileSystemLabel -match 'VBOX'

  if (! $volume)
  {
    Write-Error "Could not find the VirtualBox Guest Additions CD-ROM"
    Start-Sleep 10
    exit 3
  }

  $drive=$volume.DriveLetter

  Write-Host "Installing Virtualbox Guest Additions"
  $process = Start-Process -Wait -PassThru -FilePath ${drive}:\VBoxWindowsAdditions.exe -ArgumentList '/S /l C:\Windows\Logs\virtualbox-tools.log /v"/qn REBOOT=R"'
  if ($process.ExitCode -eq 0)
  {
    Write-Host "Installation was successful"
  }
  elseif ($process.ExitCode -eq 3010)
  {
    Write-Warning "Installation was successful, Rebooting is needed" 
  }
  else
  {
    Write-Error "Installation failed: Error= $($process.ExitCode), Logs=C:\Windows\Logs\virtualbox-tools.log"
    Start-Sleep 2; exit $process.ExitCode
  }

  Eject-Drive -DriveLetter $drive
  Start-Sleep 2
}
else
{
  Write-Error "Ignoring unsupported Packer builder: $env:PACKER_BUILDER_TYPE"
  exit 1
}